Exercise 1.3: Functions and Other Operations in Python

**Learning Goals**

•	Implement conditional statements in Python to determine program flow

•	Use loops to reduce time and effort in Python programming

•	Write functions to organize Python code

**Reflection Questions**

•	In this Exercise, you learned how to use **if-elif-else** statements to run different tasks based
 on conditions that you define. Now practice that skill by writing a script for a simple travel app 
 using an **if-elif-else** statement for the following situation:

•	The script should ask the user where they want to travel.

•	The user’s input should be checked for 3 different travel destinations that you define.

•	If the user’s input is one of those 3 destinations, the following statement should be printed:
 “Enjoy your stay in ______!”

•	If the user’s input is something other than the defined destinations, the following statement 
should be printed: “Oops, that destination is not currently available.”

Write your script here:

```python
# Define the 3 travel destinations
valid_destinations = ["Paris", "Tokyo", "New York"]

# Ask the user where they want to travel
user_input = input("Where would you like to travel? ")

# Check if the user's input matches one of the defined destinations
if user_input in valid_destinations:
    print("Enjoy your stay in", user_input + "!")
else:
    print("Oops, that destination is not currently available.")
```

•	Imagine you’re at a job interview for a Python developer role. The interviewer says “Explain 
logical operators in Python”. Draft how you would respond:

I remember these are NOT ANDOR, as in: and, or, and not, respectively. They’re boolean operators that
 use math LOGIC as a method of defining whether a statement is innately true. if a=T, b=F, then x=a
 AND b would be false, as and requires both statements to be true to satisfy the statement. Or 
 statements require only one truth, so x=a OR b if true. Not just reverses the outcome, so x=a AND b
 is true, x=a OR b is false. 

•	What are functions in Python? When and why are they useful?

Functions are blocks of code that build functionality into any arbitrary function name; such that,
 anytime that function name is invoked, it will perform that task we defined as its purpose upon
 creation. What’s more, is we can pass arguments into the function in the form of parameters; this
 is like saying I’m going to give you a task to do, and you’re going to use these things to accomplish
 that - these will be your parameters.

Functions are useful because they can package a task into a function “name” and it becomes modular; 
such that, it can be used in various ways as the programmer sees fit throughout the code. It also
really makes the code easier to read.

•	In the section for Exercise 1 in this Learning Journal, you were asked in question 3 to set some 
goals for yourself while you complete this course.  In preparation for your next mentor call, make
some notes on how you’ve progressed towards your goals so far.

Medium has been pretty useful for gathering information on tricks in Python. I have plenty of 
experience using python within the data science / machine learning space, but not really much outside 
of that, so seeing how people are using python for builds on other kinds of things has been pretty 
cool.